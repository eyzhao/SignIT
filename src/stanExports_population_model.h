// Generated by rstantools.  Do not edit by hand.

/*
    SignIT is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    SignIT is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with SignIT.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1
#include <stan/model/model_header.hpp>
namespace model_population_model_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_population_model");
    reader.add_event(52, 50, "end", "model_population_model");
    return reader;
}
#include <stan_meta_header.hpp>
class model_population_model : public prob_grad {
private:
        int N;
        int L;
        std::vector<int> x;
        std::vector<int> d;
        vector_d Ct;
        vector_d Cn;
        double purity;
        vector_d a;
public:
    model_population_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_population_model(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_population_model_namespace::model_population_model";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 1);
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "L", "int", context__.to_vec());
            L = int(0);
            vals_i__ = context__.vals_i("L");
            pos__ = 0;
            L = vals_i__[pos__++];
            check_greater_or_equal(function__, "L", L, 1);
            current_statement_begin__ = 4;
            validate_non_negative_index("x", "N", N);
            context__.validate_dims("data initialization", "x", "int", context__.to_vec(N));
            x = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("x");
            pos__ = 0;
            size_t x_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < x_k_0_max__; ++k_0__) {
                x[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 5;
            validate_non_negative_index("d", "N", N);
            context__.validate_dims("data initialization", "d", "int", context__.to_vec(N));
            d = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("d");
            pos__ = 0;
            size_t d_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < d_k_0_max__; ++k_0__) {
                d[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 6;
            validate_non_negative_index("Ct", "N", N);
            context__.validate_dims("data initialization", "Ct", "vector_d", context__.to_vec(N));
            Ct = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("Ct");
            pos__ = 0;
            size_t Ct_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < Ct_j_1_max__; ++j_1__) {
                Ct(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "Ct", Ct, 1);
            current_statement_begin__ = 7;
            validate_non_negative_index("Cn", "N", N);
            context__.validate_dims("data initialization", "Cn", "vector_d", context__.to_vec(N));
            Cn = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("Cn");
            pos__ = 0;
            size_t Cn_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < Cn_j_1_max__; ++j_1__) {
                Cn(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "Cn", Cn, 1);
            current_statement_begin__ = 8;
            context__.validate_dims("data initialization", "purity", "double", context__.to_vec());
            purity = double(0);
            vals_r__ = context__.vals_r("purity");
            pos__ = 0;
            purity = vals_r__[pos__++];
            // initialize transformed data variables
            current_statement_begin__ = 11;
            validate_non_negative_index("a", "N", N);
            a = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            stan::math::fill(a, DUMMY_VAR__);
            stan::math::assign(a,elt_divide(purity, add(multiply(purity, Ct), multiply((1 - purity), Cn))));
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 14;
            validate_non_negative_index("clone_prop", "L", L);
            num_params_r__ += (L - 1);
            current_statement_begin__ = 15;
            validate_non_negative_index("mu_ordered", "L", L);
            num_params_r__ += L;
            current_statement_begin__ = 16;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_population_model() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 14;
        if (!(context__.contains_r("clone_prop")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable clone_prop missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("clone_prop");
        pos__ = 0U;
        validate_non_negative_index("clone_prop", "L", L);
        context__.validate_dims("parameter initialization", "clone_prop", "vector_d", context__.to_vec(L));
        Eigen::Matrix<double, Eigen::Dynamic, 1> clone_prop(L);
        size_t clone_prop_j_1_max__ = L;
        for (size_t j_1__ = 0; j_1__ < clone_prop_j_1_max__; ++j_1__) {
            clone_prop(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.simplex_unconstrain(clone_prop);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable clone_prop: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 15;
        if (!(context__.contains_r("mu_ordered")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mu_ordered missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mu_ordered");
        pos__ = 0U;
        validate_non_negative_index("mu_ordered", "L", L);
        context__.validate_dims("parameter initialization", "mu_ordered", "vector_d", context__.to_vec(L));
        Eigen::Matrix<double, Eigen::Dynamic, 1> mu_ordered(L);
        size_t mu_ordered_j_1_max__ = L;
        for (size_t j_1__ = 0; j_1__ < mu_ordered_j_1_max__; ++j_1__) {
            mu_ordered(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.ordered_unconstrain(mu_ordered);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mu_ordered: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 16;
        if (!(context__.contains_r("kappa_minus_two")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable kappa_minus_two missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("kappa_minus_two");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "kappa_minus_two", "double", context__.to_vec());
        double kappa_minus_two(0);
        kappa_minus_two = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, kappa_minus_two);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable kappa_minus_two: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 14;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> clone_prop;
            (void) clone_prop;  // dummy to suppress unused var warning
            if (jacobian__)
                clone_prop = in__.simplex_constrain(L, lp__);
            else
                clone_prop = in__.simplex_constrain(L);
            current_statement_begin__ = 15;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mu_ordered;
            (void) mu_ordered;  // dummy to suppress unused var warning
            if (jacobian__)
                mu_ordered = in__.ordered_constrain(L, lp__);
            else
                mu_ordered = in__.ordered_constrain(L);
            current_statement_begin__ = 16;
            local_scalar_t__ kappa_minus_two;
            (void) kappa_minus_two;  // dummy to suppress unused var warning
            if (jacobian__)
                kappa_minus_two = in__.scalar_lb_constrain(0, lp__);
            else
                kappa_minus_two = in__.scalar_lb_constrain(0);
            // transformed parameters
            current_statement_begin__ = 19;
            validate_non_negative_index("mu", "L", L);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mu(L);
            stan::math::initialize(mu, DUMMY_VAR__);
            stan::math::fill(mu, DUMMY_VAR__);
            stan::math::assign(mu,inv_logit(mu_ordered));
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 19;
            size_t mu_j_1_max__ = L;
            for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(mu(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: mu" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable mu: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "mu", mu, 0);
            check_less_or_equal(function__, "mu", mu, 1);
            // model body
            {
            current_statement_begin__ = 22;
            validate_non_negative_index("alpha", "N", N);
            validate_non_negative_index("alpha", "L", L);
            std::vector<std::vector<local_scalar_t__  >  > alpha(N, std::vector<local_scalar_t__>(L, local_scalar_t__(DUMMY_VAR__)));
            stan::math::initialize(alpha, DUMMY_VAR__);
            stan::math::fill(alpha, DUMMY_VAR__);
            current_statement_begin__ = 23;
            validate_non_negative_index("beta", "N", N);
            validate_non_negative_index("beta", "L", L);
            std::vector<std::vector<local_scalar_t__  >  > beta(N, std::vector<local_scalar_t__>(L, local_scalar_t__(DUMMY_VAR__)));
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);
            current_statement_begin__ = 26;
            validate_non_negative_index("pop_likelihood", "L", L);
            validate_non_negative_index("pop_likelihood", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> pop_likelihood(L, N);
            stan::math::initialize(pop_likelihood, DUMMY_VAR__);
            stan::math::fill(pop_likelihood, DUMMY_VAR__);
            current_statement_begin__ = 27;
            validate_non_negative_index("likelihood_sums", "L", L);
            validate_non_negative_index("likelihood_sums", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> likelihood_sums(L, N);
            stan::math::initialize(likelihood_sums, DUMMY_VAR__);
            stan::math::fill(likelihood_sums, DUMMY_VAR__);
            current_statement_begin__ = 28;
            validate_non_negative_index("likelihood_colsums", "N", N);
            Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> likelihood_colsums(N);
            stan::math::initialize(likelihood_colsums, DUMMY_VAR__);
            stan::math::fill(likelihood_colsums, DUMMY_VAR__);
            current_statement_begin__ = 30;
            lp_accum__.add(dirichlet_log<propto__>(clone_prop, rep_vector(1, L)));
            current_statement_begin__ = 31;
            lp_accum__.add(gamma_log<propto__>(kappa_minus_two, 0.01, 0.01));
            current_statement_begin__ = 32;
            lp_accum__.add(logistic_log<propto__>(mu_ordered, 0, 1));
            current_statement_begin__ = 34;
            stan::math::assign(alpha, to_array_2d(multiply(multiply(a, to_row_vector(mu)), (kappa_minus_two + 2))));
            current_statement_begin__ = 35;
            stan::math::assign(beta, to_array_2d(multiply(subtract(1, multiply(a, to_row_vector(mu))), (kappa_minus_two + 2))));
            current_statement_begin__ = 37;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 38;
                for (int l = 1; l <= L; ++l) {
                    current_statement_begin__ = 39;
                    stan::model::assign(pop_likelihood, 
                                stan::model::cons_list(stan::model::index_uni(l), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), 
                                beta_binomial_log(get_base1(x, n, "x", 1), get_base1(d, n, "d", 1), get_base1(get_base1(alpha, n, "alpha", 1), l, "alpha", 2), get_base1(get_base1(beta, n, "beta", 1), l, "beta", 2)), 
                                "assigning variable pop_likelihood");
                }
            }
            current_statement_begin__ = 43;
            for (int l = 1; l <= L; ++l) {
                current_statement_begin__ = 44;
                stan::model::assign(likelihood_sums, 
                            stan::model::cons_list(stan::model::index_uni(l), stan::model::nil_index_list()), 
                            add(stan::math::log(get_base1(clone_prop, l, "clone_prop", 1)), get_base1(pop_likelihood, l, "pop_likelihood", 1)), 
                            "assigning variable likelihood_sums");
            }
            current_statement_begin__ = 47;
            stan::math::assign(likelihood_sums, stan::math::exp(likelihood_sums));
            current_statement_begin__ = 48;
            stan::math::assign(likelihood_colsums, multiply(to_row_vector(rep_vector(1, L)), likelihood_sums));
            current_statement_begin__ = 49;
            lp_accum__.add(sum(stan::math::log(likelihood_colsums)));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("clone_prop");
        names__.push_back("mu_ordered");
        names__.push_back("kappa_minus_two");
        names__.push_back("mu");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(L);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(L);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(L);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_population_model_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> clone_prop = in__.simplex_constrain(L);
        size_t clone_prop_j_1_max__ = L;
        for (size_t j_1__ = 0; j_1__ < clone_prop_j_1_max__; ++j_1__) {
            vars__.push_back(clone_prop(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> mu_ordered = in__.ordered_constrain(L);
        size_t mu_ordered_j_1_max__ = L;
        for (size_t j_1__ = 0; j_1__ < mu_ordered_j_1_max__; ++j_1__) {
            vars__.push_back(mu_ordered(j_1__));
        }
        double kappa_minus_two = in__.scalar_lb_constrain(0);
        vars__.push_back(kappa_minus_two);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 19;
            validate_non_negative_index("mu", "L", L);
            Eigen::Matrix<double, Eigen::Dynamic, 1> mu(L);
            stan::math::initialize(mu, DUMMY_VAR__);
            stan::math::fill(mu, DUMMY_VAR__);
            stan::math::assign(mu,inv_logit(mu_ordered));
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 19;
            check_greater_or_equal(function__, "mu", mu, 0);
            check_less_or_equal(function__, "mu", mu, 1);
            // write transformed parameters
            if (include_tparams__) {
                size_t mu_j_1_max__ = L;
                for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                    vars__.push_back(mu(j_1__));
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    static std::string model_name() {
        return "model_population_model";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t clone_prop_j_1_max__ = L;
        for (size_t j_1__ = 0; j_1__ < clone_prop_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "clone_prop" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t mu_ordered_j_1_max__ = L;
        for (size_t j_1__ = 0; j_1__ < mu_ordered_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_ordered" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "kappa_minus_two";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t mu_j_1_max__ = L;
            for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t clone_prop_j_1_max__ = (L - 1);
        for (size_t j_1__ = 0; j_1__ < clone_prop_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "clone_prop" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t mu_ordered_j_1_max__ = L;
        for (size_t j_1__ = 0; j_1__ < mu_ordered_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_ordered" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "kappa_minus_two";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t mu_j_1_max__ = L;
            for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_population_model_namespace::model_population_model stan_model;
#endif
